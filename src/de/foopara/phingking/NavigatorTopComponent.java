/*
 * See:
 * http://platform.netbeans.org/tutorials/nbm-nodesapi3.html
 */
package de.foopara.phingking;

import de.foopara.phingking.exec.RunTarget;
import de.foopara.phingking.exec.RunThread;
import de.foopara.phingking.nodes.CategoryChildren;
import de.foopara.phingking.nodes.RootNode;
import de.foopara.phingking.registry.TargetEntry;
import de.foopara.phingking.registry.TargetRegistry;
import java.util.UUID;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.loaders.DataObject;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.foopara.phingking//Navigator//EN", autostore = false)
@TopComponent.Description( preferredID = "NavigatorTopComponent", iconBase="de/foopara/phingking/resources/icon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "tools", openAtStartup = true)
@ActionID(category = "Window", id = "de.foopara.phingking.NavigatorTopComponent")
@ActionReference(path = "Menu/Window" , position = 733 )
@TopComponent.OpenActionRegistration(displayName = "#CTL_NavigatorAction", preferredID = "NavigatorTopComponent")
@Messages({
    "CTL_NavigatorAction=Phing Targets",
    "CTL_NavigatorTopComponent=Phing Targets",
    "HINT_NavigatorTopComponent=Displays phing targets"
})
public final class NavigatorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private transient ExplorerManager explorerManager = new ExplorerManager();
    private UUID currentView = null;
    private Lookup lookup = null;

    private static NavigatorTopComponent instance = null;
    public static NavigatorTopComponent getInstance() {
        return NavigatorTopComponent.instance;
    }

    public NavigatorTopComponent() {
        initComponents();
        NavigatorTopComponent.instance = this;
        setName(Bundle.CTL_NavigatorTopComponent());
        setToolTipText(Bundle.HINT_NavigatorTopComponent());
        this.associateLookup(ExplorerUtils.createLookup(this.explorerManager, getActionMap()));
        this.explorerManager.getRootContext().setDisplayName("Phing Targets");
        this.lookup = this.explorerManager.getExploredContext().getLookup();

        Utilities.actionsGlobalContext().lookupResult(DataObject.class).addLookupListener(new ChangingLookupListener());
//        Utilities.actionsGlobalContext().lookupResult(Project.class).addLookupListener(new ChangingLookupListener());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        targetScroll = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel1.setMinimumSize(new java.awt.Dimension(16, 25));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 25));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/foopara/phingking/resources/reload.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "NavigatorTopComponent.jButton1.text")); // NOI18N
        jButton1.setToolTipText(org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "NavigatorTopComponent.jButton1.toolTipText")); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel1.add(jButton1, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
        add(targetScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        TargetRegistry tr = TargetRegistry.getInstance(this.lookup);
        if (tr == null) {
            return;
        }
        tr.update(lookup);
        this.update();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane targetScroll;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        NavigatorTopComponent.instance = null;
    }

    @Override
    public void open() {
        /**
         * Possible Modes
         *
         * explorer          = Projects window (left side)
         * properties        = Properties window (right side)
         * leftSlidingSide   = button on left sidebar
         * rightSlidingSide  = button on the right sidebar
         * bottomSlidingSide = button on the bottom bar
         * editor            = where the editor is (center)
         * output            = Output Window (bottom)
         * navigator         = Navigator window (lower left)
         * tools             = early navigator
         */
        Mode mode = WindowManager.getDefault().findMode("navigator");
        if (mode != null) {
            mode.dockInto(this);
        }
        super.open();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.explorerManager;
    }

    public void setLookup(Lookup lkp) {
        this.lookup = lkp;
        TargetRegistry tr = TargetRegistry.getInstance(this.lookup);
        if (tr == null) {
            return;
        }
        if (this.currentView == null || this.currentView.compareTo(tr.getId()) != 0) {
            this.update();
            this.currentView = tr.getId();
        }
    }

    public Lookup getCurrentLookup() {
        return this.lookup;
    }

    public void update() {
        this.explorerManager.setRootContext(new RootNode(new CategoryChildren(this.lookup)));
    }

    public void runTarget(TargetEntry entry) {
        RunTarget run = new RunTarget(this.lookup, entry);
        new Thread(new RunThread(run)).start();
    }
}
