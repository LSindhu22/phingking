/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.foopara.phingking.options.ui;

import de.foopara.phingking.NavigatorTopComponent;
import de.foopara.phingking.exec.ListTargets;
import de.foopara.phingking.options.ProjectProperties;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.openide.util.Lookup;

/**
 *
 * @author n.specht
 */
public class PropertiesPanel extends javax.swing.JPanel {

    private Lookup lookup = null;

    /**
     * Creates new form Properties
     */
    public PropertiesPanel() {
        this(null);
    }

    public PropertiesPanel(Lookup context) {
        initComponents();
        this.lookup = context;
        this.load();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PropertiesPanel.class, "PropertiesPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        add(jLabel1, gridBagConstraints);

        jTextField1.setText(org.openide.util.NbBundle.getMessage(PropertiesPanel.class, "PropertiesPanel.jTextField1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        add(jTextField1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PropertiesPanel.class, "PropertiesPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File file = new File(jTextField1.getText());
        if (!file.exists()) {
            file = new File(".");
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setCurrentDirectory(file);
        chooser.setDialogTitle("Choose build file");
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                return (file.isFile() && file.getName().toLowerCase().endsWith(".xml"))
                        || file.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Phing Build Files";
            }
        });
        chooser.setVisible(true);
        int result = chooser.showDialog(this, null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.jTextField1.setText(chooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void save() {
        ProjectProperties pp = new ProjectProperties(this.lookup);
        pp.put("buildfile", this.jTextField1.getText());
        if (NavigatorTopComponent.getInstance() != null) {
            NavigatorTopComponent.getInstance().setLookup(this.lookup);
        }
    }

    public void load() {
        ProjectProperties pp = new ProjectProperties(this.lookup);
        this.jTextField1.setText(pp.get("buildfile", ""));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
